
# 1.两数相加

## 问题描述
> 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807


## 思路
由于是逆序存放，所以链表的顺序就是我们平时加法的由小到大的顺序。因此我们可以新建一个链表l3用于存放答案，一个Flag用于判断是否满十进一。
同时依次遍历两个链表，如果不为空则加入ans中，最后将ans判断是否大于十获取flag，并取余放入l3。
在l1 l2都空了的情况下，判断flag是否为1，如果为1，则l3还需增加一位1 。
## 代码
```java
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* l3=new ListNode(-1);
        ListNode* h=l3;
        int ans=0;
        bool flag=0;
        while(l1!=NULL||l2!=NULL)
        {
            ans=0;
            if(l1!=NULL)
            {
                ans+=l1->val;
                l1=l1->next;
            }
            if(l2!=NULL)
            {
                ans+=l2->val;
                l2=l2->next;
            }
            if(flag)
                ans++;
            h->next=new ListNode(ans%10);
            h=h->next;
            flag=ans>=10?true:false;
        }
        if(flag)
        {
            h->next=new ListNode(1);
        }
        return l3->next;
    }
};
```
